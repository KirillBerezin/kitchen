import pygame
import random

pygame.init()

display_width = 800
display_height = 600

display = pygame.display.set_mode((display_width , display_height))
pygame.display.set_caption('Bereza Game')

icon = pygame.image.load('icon.png')
pygame.display.set_icon(icon)

cactus_img = [pygame.image.load('1y.png'), pygame.image.load('2y.png') , pygame.image.load('3y.png')]
cactus_options = [69 , 449, 37, 410, 40, 420]

class Cactus:
    def __init__(self, x, y, width, image, speed):
        self.x = x
        self.y = y
        self.width = width
        self.speed = speed
        self.image = image

    def move(self):
        if self.x >= -self.width:
            display.blit(self.image, (self.x , self.y))
            # pygame.draw.rect(display, (224, 121, 31), (self.x, self.y, self.width, self.height))
            self.x -= self.speed
            return True
        else:
            self.x = display_width + 100 + random.randrange(-80 , 60)
            return False

    def return_self(self, radius, y, width , image):
        self.x = radius
        self.y = y
        self.width = width
        self.image = image
        display.blit(self.image, (self.x, self.y))

user_width = 60
user_height = 100
user_x = display_width //4 - user_width
user_y = display_height - 100 - user_height

#Настройки препятствия
cactus_width = 20
cactus_height = 70
cactus_x = display_width - 50
cactus_y = display_height - 100 - cactus_height

clock = pygame.time.Clock()

user_jump = False
jump_counter = 30

def run_game():
    global user_jump
    game = True
    cactus_arr=[]
    create_cactus_arr(cactus_arr)
    land = pygame.image.load('land.png')

    while game:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE]:
            user_jump = True
        if user_jump:
            jump()

        display.blit(land, (0 , 0))
        draw_array(cactus_arr)

        pygame.draw.rect(display , (247 , 240 , 22), (user_x , user_y, user_width, user_height))

        pygame.display.update()
        clock.tick(60)

def jump():
    global user_y , jump_counter , user_jump
    if jump_counter >= -30:
        user_y -= jump_counter / 3
        jump_counter -= 1
    else:
        jump_counter = 30
        user_jump = False

def create_cactus_arr(array):
    choise = random.randrange(0, 3)
    img = cactus_img[choise]
    width = cactus_options[choise * 2]
    height = cactus_options[choise * 2 + 1]
    array.append(Cactus(display_width + 20 , height, width, img, 4))

    choise = random.randrange(0, 3)
    img = cactus_img[choise]
    width = cactus_options[choise * 2]
    height = cactus_options[choise * 2 + 1]
    array.append(Cactus(display_width + 300, height, width, img, 4))

    choise = random.randrange(0, 3)
    img = cactus_img[choise]
    width = cactus_options[choise * 2]
    height = cactus_options[choise * 2 + 1]
    array.append(Cactus(display_width + 600, height, width, img, 4))

def find_radius(array):
    maximum = max(array[0].x, array[1].x, array[2].x)

    if maximum < display_width:
        radius = display_width
        if radius - maximum < 50:
            radius += 150
    else:
        radius = maximum

    choise = random.randrange(0 , 5)
    if choise == 0:
        radius += random.randrange(30 , 40)
    else:
        radius += random.randrange(200 , 350)

    return radius

def draw_array(array):
    for cactus in array:
        check = cactus.move()
        if not check:
            radius = find_radius(array)

            choise = random.randrange(0, 3)
            img = cactus_img[choise]
            width = cactus_options[choise * 2]
            height = cactus_options[choise * 2 + 1]

            cactus.return_self(radius, height, width, img)

run_game()
